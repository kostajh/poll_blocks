<?php
// $Id$

/**
 * Implementation of hook_block().
 *
 * Generates a block containing the latest poll.
 */
function poll_blocks_block($op = 'list', $delta = 0) {
	
	if (user_access('access content')) {
			
		if ($op == 'list' && $polls = poll_blocks_get_polls()) {
			
			// Poll blocks will be registered when user visits admin/build/blocks
			foreach ($polls as $key => $pollnode) {
				$blocks[$key]['info'] = t('Poll: !poll', array('!poll' => $pollnode->title));
				$deltas[$key] = $pollnode->nid;
			}
			
			variable_set('poll_blocks', $deltas, array());
			
			return $blocks;
			
		} else if ($op == 'view' && $deltas = variable_get('poll_blocks', array())) {
			foreach($deltas as $key => $nid) {
				if ($key == $delta) {
					// Load the data for the poll and render it in a block
					$poll = node_load($nid);
					if ($poll->status == 1) {
						$poll = poll_view($poll, TRUE, FALSE, TRUE);
						$block['subject'] = t('!title', array('!title' => $poll->title));
						$block['content'] = drupal_render($poll->content);
						return $block;
					}
				}
			}
		}
	}
}

/**
 * Implementation of hook_nodeapi().
 */
function poll_blocks_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
	
  switch ($op) {
    case 'delete':
      if ($node->type == 'poll') {
			
				if ($polls = variable_get('poll_blocks', array())) {
					$poll_nodes = array_flip($polls);
					unset($poll_nodes[$node->nid]);
					variable_set('poll_blocks', array_flip($poll_nodes));
				}
				
			}
      break;
  }
}

/**
 * Get an array of poll objects for use in hook_block().
 *
 * @return array of Poll node objects.
 */
function poll_blocks_get_polls() {
	drupal_set_message(t('we are querying the db'));
	$sql = db_query(db_rewrite_sql("SELECT n.nid FROM {node} n INNER JOIN {poll} p ON p.nid = n.nid WHERE n.status = 1"));
	$polls = array();

	while ($data = db_fetch_object($sql)) {
		$polls[] = node_load($data->nid);
	}
	
	return $polls;
}